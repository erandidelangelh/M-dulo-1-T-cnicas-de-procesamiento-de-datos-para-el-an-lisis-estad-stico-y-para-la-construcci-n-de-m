# -*- coding: utf-8 -*-
"""Módulo 1 Técnicas de procesamiento de datos para el análisis estadístico y para la construcción de modelos

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15NUCqGptBLC9V2pSk9YNMf6mB9-cmW-y

# Librerías

Se cargan las librerías que se estarán utilizando para el manejo de datos y visualización
"""

import pandas as pd
from google.colab import drive
import matplotlib.pyplot as plt
import numpy as np

"""# Cargar datos

Se obtienen los datos de Google Drive
"""

drive.mount("/content/gdrive")  
!pwd  # show current path

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/gdrive/MyDrive/Colab Notebooks/Concentración 7to/Elisabetta"
!ls  # show current directory

data = pd.read_csv('Automobile.csv')

"""# Preprocesamiento de los datos

Se muestra la información de todas las columans para conocer el tipo de datos que se estarán manejando
"""

pd.set_option('display.max_columns', None) # Muestra todas las columnas
data

"""Convertir a NaN

No se encontraron datos con valores nan, sin embargo aparecen como '?', por lo que se transforman a nan para un mejor manejo
"""

data.replace('?', np.nan, inplace=True)
data

data.columns

"""Identificación de variables numéricas y categóricas"""

data.dtypes

"""Las variables numéricas son:
*   symboling
*   normalized-losses
*   wheel-base
*   length
*   width
*   height
*   curb-weight
*   engine-size
*  	bore
* 	stroke
* 	compression-ratio
* 	horsepower
* 	peak-rpm
* 	city-mpg
* 	highway-mpg
* 	price

Las variables categóricas son:
*   make
*   fuel-type
*   aspiration
*   number-of-doors
*   body-style
*   drive-wheels
*   engine-location
*   engine-type
*   num-of-cylinders
*   fuel-system

Aquí se transforman el tipo de datos, pues al inicio debido a los '?' se identificaron varias variables como si fueran de tipo string a pesar de ser numéricas. 

A su vez, 'number-of-doors' y 'num-of-cylinders' tiene valores numéricos escritos en palabra, se cambian a número para poder manejarlas mejor. 

Se transforman a tipo numéricas dichas variables.
"""

# 'normalized-losses', 'bore', 'stroke', 'horsepower', 'peak-rpm', 'price'
# 'make', 'fuel-type', 'aspiration', 'number-of-doors', 'body-style', 'drive-wheels', 'engine-location', 'engine-type', 'num-of-cylinders', 'fuel-system'
data[['normalized-losses', 'bore', 'stroke', 'horsepower', 'peak-rpm', 'price']] = data[['normalized-losses', 'bore', 'stroke', 'horsepower', 'peak-rpm', 'price']].astype(float)

# Cambiar variables categóricas a numéricas
data['number-of-doors'].replace('two', int(2), inplace = True)
data['number-of-doors'].replace('four', int(4), inplace = True)

data['num-of-cylinders'].replace('two', int(2), inplace = True)
data['num-of-cylinders'].replace('three', int(3), inplace = True)
data['num-of-cylinders'].replace('four', int(4), inplace = True)
data['num-of-cylinders'].replace('five', int(5), inplace = True)
data['num-of-cylinders'].replace('six', int(6), inplace = True)
data['num-of-cylinders'].replace('eight', int(8), inplace = True)
data['num-of-cylinders'].replace('twelve', int(12), inplace = True)
data

data.info()

data.isnull().sum()

"""normalized-losses, number-of-doors, bore, stroke, horsepower, peak-rpm, price tiene valores faltantes

Correlación en los datos
"""

import seaborn as sns
corr = data.corr()
sns.set(rc = {'figure.figsize':(20,12)})
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True,
    annot = True
)
ax.set_xticklabels(
    ax.get_xticklabels(),
    rotation=45,
    horizontalalignment='right'
);

"""## Reemplazar valores nan"""

df = data.copy()

"""Se decide cambiar los valores faltantes por la media de los datos pues es una medida representativa de los datos

### 'bore'
"""

df[pd.isna(df['bore'])]

400 / 205  # Los 4 registros con valores faltantes en 'bore' representan casi 2% de la cantidad total del dataset
# No es mucho pero considerando que el tamaño del dataset es pequeño, quizás sea bueno reemplazarlos con algún valor para no perder la información
# de las demás columnas

"""Visualizaciones con valores faltantes"""

# Eliminar valores nan
df2 = df.drop(df[pd.isna(df['bore'])].index)
# Box plot para encontrar outliers
plt.rcParams['axes.facecolor'] = 'aliceblue'
fig = plt.figure(figsize =(4, 2))
ax = fig.add_axes([0, 0, 1, 1]) # Creating axes instance
bp = ax.boxplot(df2['bore']) # Creating plot
plt.show() # show plot

# Obtener el promedio
bore_mean = df2['bore'].mean()
print(bore_mean)

# Histograma
sns.set(rc = {'figure.figsize':(8,4)})
plt.figure(facecolor='w')
plt.hist(df2['bore'], color = "skyblue", ec="black",label='bore',density=True)
ax = plt.axes()
ax.set_facecolor("w")
plt.legend()
plt.title('Distributions for the variable bore')
plt.show()

"""Como no hay outliers en 'bore' se pueden reemplazar los valores faltantes con el promedio, pues este no se ve afectado por outliers

Visualizaciones sin valores faltantes
"""

df[(df['make'] == 'mazda')]['bore'].mean() # 3.2869230769230766
bore_mean = df[pd.isna(df['bore']) == False]['bore'].mean() # 3.3297512437810943
df['bore'].replace(np.nan, bore_mean, inplace=True)
df[df.bore == bore_mean]

# Box plot de 'bore' sin valores nan
plt.rcParams['axes.facecolor'] = 'aliceblue'
fig = plt.figure(figsize =(4, 2))
ax = fig.add_axes([0, 0, 1, 1]) # Creating axes instance
bp = ax.boxplot(df['bore']) # Creating plot
plt.show() # show plot

# Histograma
sns.set(rc = {'figure.figsize':(8,4)})
plt.figure(facecolor='w')
plt.hist(df['bore'], color = "skyblue", ec="black",label='bore',density=True)
ax = plt.axes()
ax.set_facecolor("w")
plt.legend()
plt.title('Distributions for the variable bore')
plt.show()

"""No hay mucho cambio en el boxplot ni en el histograma, de esta manera ya queda procesada la variable de 'bore'

### 'horsepower'
"""

df[pd.isna(df['horsepower'])]

# Eliminar valores nan
df2 = df.drop(df[pd.isna(df['horsepower'])].index)

# Box plot para encontrar outliers
plt.rcParams['axes.facecolor'] = 'aliceblue'
fig = plt.figure(figsize =(4, 2))
ax = fig.add_axes([0, 0, 1, 1]) # Creating axes instance
bp = ax.boxplot(df2['horsepower']) # Creating plot
plt.show() # show plot

# Histograma
sns.set(rc = {'figure.figsize':(8,4)})

plt.hist(df2['horsepower'], color = "skyblue", ec="black",label='horsepower',density=True)
ax = plt.axes()
ax.set_facecolor("w")
plt.legend()
plt.title('Distributions for the variable horsepower')
plt.show()

"""Como se puede ver en el boxplot, hay dos valores que sobresalen y en el histograma se puede observar que está modificando la distribución de los datos, por lo que se decide que estos se deberán eliminar.

En la correlación de los datos, 'horsepower' presenta un 81% de correlación con 'price', por lo que se podría considerar una variable importante relación con 'price'. 
Las características que tienen mayor correlación con 'horsepower' son 'curb-weight', 'engine-size', 'city-mpg', 'highway-mpg' y 'price'.
"""

df2 = df.drop(df[pd.isna(df['horsepower'])].index)
horsepower_mean = df2['horsepower'].mean()
print("Promedio general de 'horsepower'", horsepower_mean)

horsepower_mean = df[(df['fuel-type'] == 'gas') & (df['aspiration'] == 'std') & (df['drive-wheels'] == 'fwd') & (df['engine-type'] == 'ohc') & (df['fuel-system'] == 'mpfi') & (df['engine-location'] == 'front')]['horsepower'].mean()
print("Promedio de 'horsepower' con carros de características similares", horsepower_mean)

# Reemplazar valores faltantes
df['horsepower'].replace(np.nan, horsepower_mean, inplace=True)

"""### 'number-of-doors'"""

df[pd.isna(df['number-of-doors'])]

df[(df['body-style'] == 'sedan') & (df['number-of-doors'] == 4)]
df[(df['body-style'] == 'sedan') & (df['engine-location'] == 'front') & (df['engine-type'] == 'ohc')]
df[(df['body-style'] == 'sedan') & (df['engine-location'] == 'front') & (df['num-of-cylinders'] == 'ohc')]

# Promedio 
numerofdoors_mean = df[pd.isna(df['number-of-doors']) == False]['number-of-doors'].mean()
print(numerofdoors_mean)

# Reemplazar valores faltantes con promedio
df['number-of-doors'].replace(np.nan, numerofdoors_mean, inplace = True)

"""### 'peak-rpm'"""

df[pd.isna(df['peak-rpm'])]

"""Visualizaciones con valores faltantes"""

# Eliminar valores nan
df2 = df.drop(df[pd.isna(df['peak-rpm'])].index)
# Box plot para encontrar outliers
plt.rcParams['axes.facecolor'] = 'aliceblue'
fig = plt.figure(figsize =(4, 2))
ax = fig.add_axes([0, 0, 1, 1]) # Creating axes instance
bp = ax.boxplot(df2['peak-rpm']) # Creating plot
plt.show() # show plot

# Obtener el promedio
peakrpm_mean = df2['peak-rpm'].mean()
print(peakrpm_mean)

# Histograma
sns.set(rc = {'figure.figsize':(8,4)})
plt.figure(facecolor='w')
plt.hist(df2[df2['peak-rpm'] < 6500]['peak-rpm'], color = "skyblue", ec="black",label='peak-rpm',density=True)
ax = plt.axes()
ax.set_facecolor("w")
plt.legend()
plt.title('Distributions for the variable peak-rpm')
plt.show()

peakrpm_mean = df[pd.isna(df['peak-rpm']) == False]['peak-rpm'].mean()
print('Promedio tomando outliers: ', peakrpm_mean)
peakrpm_mean = df[df['peak-rpm'] < 6000]['peak-rpm'].mean()
print('Promedio quitando outliers: ', peakrpm_mean)

# Se reemplazan los valores faltantes con el promedio
df['peak-rpm'].replace(np.nan, peakrpm_mean, inplace=True)

"""### 'stroke'"""

df[pd.isna(df['stroke'])]

"""Visualizaciones con valores faltantes"""

# Eliminar valores nan
df2 = df.drop(df[pd.isna(df['stroke'])].index)
# Box plot para encontrar outliers
plt.rcParams['axes.facecolor'] = 'aliceblue'
fig = plt.figure(figsize =(4, 2))
ax = fig.add_axes([0, 0, 1, 1]) # Creating axes instance
bp = ax.boxplot(df2['stroke']) # Creating plot
plt.show() # show plot

# Obtener el promedio
bore_mean = df2['stroke'].mean()
print(bore_mean)

# Histograma
sns.set(rc = {'figure.figsize':(8,4)})
plt.figure(facecolor='w')
plt.hist(df2['stroke'], color = "skyblue", ec="black",label='stroke',density=True)
ax = plt.axes()
ax.set_facecolor("w")
plt.legend()
plt.title('Distributions for the variable stroke')
plt.show()

# Sin 4 registros de nan, 6 registros de outliers = 195 restantes
df2 = df[df['stroke'] < 4]
df2 = df2[df2['stroke'] > 2.6]

# Cálculo del promedio 
stroke_mean = df[pd.isna(df['stroke']) == False]['stroke'].mean()
print('Promedio tomando outliers: ', stroke_mean)
stroke_mean = df2['stroke'].mean()
print('Promedio quitando outliers: ', stroke_mean)

# Se reemplazan los valores faltantes con el promedio
df['stroke'].replace(np.nan, stroke_mean, inplace=True)

"""### 'normalized-losses'"""

df[pd.isna(df['normalized-losses'])]

"""Visualizaciones con valores faltantes"""

# Eliminar valores nan
df2 = df.drop(df[pd.isna(df['normalized-losses'])].index)
# Box plot para encontrar outliers
plt.rcParams['axes.facecolor'] = 'aliceblue'
fig = plt.figure(figsize =(4, 2))
ax = fig.add_axes([0, 0, 1, 1]) # Creating axes instance
bp = ax.boxplot(df2['normalized-losses']) # Creating plot
plt.show() # show plot

# Obtener el promedio
normalizedlosses_mean = df2['normalized-losses'].mean()
print(normalizedlosses_mean)

# Histograma
sns.set(rc = {'figure.figsize':(8,4)})
plt.figure(facecolor='w')
plt.hist(df[df['normalized-losses'] < 200]['normalized-losses'], color = "skyblue", ec="black",label='normalized-losses',density=True)
ax = plt.axes()
ax.set_facecolor("w")
plt.legend()
plt.title('Distributions for the variable normalized-losses')
plt.show()

df[df['normalized-losses'] > 200]

# Cálculo del promedio 
normalizedlosses_mean = df[pd.isna(df['normalized-losses']) == False]['normalized-losses'].mean()
print('Promedio tomando outliers: ', normalizedlosses_mean)
normalizedlosses_mean = df[df['normalized-losses'] < 200]['normalized-losses'].mean()
print('Promedio quitando outliers: ', normalizedlosses_mean)

# Se reemplazan los valores faltantes con el promedio
df['normalized-losses'].replace(np.nan, normalizedlosses_mean, inplace=True)

"""### 'price'"""

df[pd.isna(df['price'])]

"""Los registros que tienen valores vacíos en price se decide que se borrarán porque además de que son pocos, cuentan con varias columnas que originalmente tenían valores vacíos. """

df_final = df.drop(df[pd.isna(df['price'])].index)

"""El dataframe final con la eliminación de ciertos outliers y el reemplazamiento de valores faltantes queda de la siguiente manera:"""

df_final



"""# Modelo"""

df_final.to_csv('df_procesado.csv', index=False)

df_final.dtypes

from google.colab import drive
drive.mount('/content/drive')

"""Regresión lineal"""

df_final.to_csv('df_final.csv')
from google.colab import files
files.download("df_final.csv")

